version: "3.8"
services:
  config-server:
    container_name: config-server
    image: umitcoban/config-server:1.0.0
    healthcheck:
      test: "curl --fail --silent localhost:8763/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 40s
    ports:
      - "8763:8763"
    networks:
      - umitcoban

  eureka-server:
    container_name: eureka-server
    image: umitcoban/eureka-server:1.0.0
    healthcheck:
      test: "curl --fail --silent localhost:8761/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 40s
    environment:
      SPRING_CONFIG_IMPORT: "configserver:http://config-server:8763"
    ports:
      - "8761:8761"
    depends_on:
      config-server:
        condition: service_healthy
    networks:
      - umitcoban

  gateway-server:
    container_name: gateway-server
    image: umitcoban/gateway-server:1.0.0
    environment:
      SPRING_CONFIG_IMPORT: "configserver:http://config-server:8763"
      SPRING_PROFILES_ACTIVE: "qa"
    ports:
      - "8765:8765"
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    networks:
      - umitcoban

  account-db:
    container_name: account-db
    image: postgres:16.0
    restart: unless-stopped
    ports:
      - "5445:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "account_db" ]
    environment:
      POSTGRES_DB: "account_db"
      POSTGRES_USER: "account"
      POSTGRES_PASSWORD: "account"
      POSTGRES_ROOT_PASSWORD: "account"
    volumes:
      - ./account_db/data:/var/lib/postgresql/data
    networks:
      - umitcoban

  account-server:
    container_name: account-server
    image: umitcoban/account-server:1.0.0
    environment:
      SPRING_CONFIG_IMPORT: "configserver:http://config-server:8763"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://account-db:5432/account_db"
      SPRING_DATASOURCE_USERNAME: "account"
      SPRING_DATASOURCE_PASSWORD: "account"
      SPRING_RABBITMQ_HOST: "rabbitmq"
      SPRING_PROFILES_ACTIVE: "qa"
      LOGSTASH_HOST: "logstash"
      LOGSTASH_PORT: 5000
    ports:
      - "8440:8440"
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      account-db:
        condition: service_healthy
    networks:
      - umitcoban

  document-mongo-db:
    container_name: document-db
    image: mongo:8.0.0-rc4
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    ports:
      - "27017:27017"
    volumes:
      - document_mongo_db_data:/data/db
    healthcheck:
      test: "echo 'db.runCommand({ping: 1})' | mongo --username admin --password password --authenticationDatabase admin --quiet"
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - umitcoban

  document-server:
    container_name: document-server
    image: umitcoban/document-server:1.0.0
    environment:
      SPRING_CONFIG_IMPORT: "configserver:http://config-server:8763"
      SPRING_RABBITMQ_HOST: "rabbit"
      SPRING_DATA_MONGODB_HOST: "document-mongo-db"  # Use the service name as the hostname
      SPRING_DATA_MONGODB_PORT: 27017
      SPRING_DATA_MONGODB_DATABASE: "medsoft-document"
      SPRING_DATA_MONGODB_USERNAME: "admin"
      SPRING_DATA_MONGODB_PASSWORD: "password"
      SPRING_DATA_MONGODB_URI: "mongodb://admin:password@document-mongo-db:27017/medsoft-document?authSource=admin&authMechanism=SCRAM-SHA-256"
      SPRING_PROFILES_ACTIVE: "qa"
      LOGSTASH_HOST: "logstash"
      LOGSTASH_PORT: 5000
    ports:
      - "8445:8445"
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      document-mongo-db:
        condition: service_healthy
    networks:
      - umitcoban

  key-cloak-db:
    container_name: key-cloak-db
    image: postgres:16.0
    restart: unless-stopped
    ports:
      - "5435:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "keycloak" ]
    environment:
      POSTGRES_DB: "keycloak"
      POSTGRES_USER: "keycloak"
      POSTGRES_PASSWORD: "keycloak"
      POSTGRES_ROOT_PASSWORD: "keycloak"
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
    networks:
      - umitcoban

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:24.0.0
    command: [ "start-dev" ]
    restart: unless-stopped
    depends_on:
      key-cloak-db:
        condition: service_healthy
    environment:
      KC_DB: "postgres"
      KC_DB_USERNAME: "keycloak"
      KC_DB_PASSWORD: "keycloak"
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
      KC_DB_URL: "jdbc:postgresql://key-cloak-db:5432/keycloak"
      KC_METRICS_ENABLED: true
      KC_LOG_LEVEL: INFO
    ports:
      - "7080:8080"
    networks:
      - umitcoban

  rabbitmq:
    image: rabbitmq:latest
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 5s
    networks:
      - umitcoban

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    environment:
      - discovery.type=single-node
      - ELASTIC_USERNAME=elastic
      - ELASTIC_PASSWORD=changeme
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    networks:
      - umitcoban

  logstash:
    container_name: logstash
    image: docker.elastic.co/logstash/logstash:8.13.4
    volumes:
      - ../observability/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5000:5000"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=changeme
    networks:
      - umitcoban

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:8.13.4
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_SERVICE_TOKEN=AAEAAWVsYXN0aWMva2liYW5hL2RlZmF1bHQ6bHZ4V25BeGlRd2ltVDVXZHZxOGs0dw
      - xpack.encryptedSavedObjects.encryptionKey=abcdefghijklmnopqrstuvwxyz123456
      - xpack.security.encryptionKey=abcdefghijklmnopqrstuvwx123456
      - xpack.reporting.encryptionKey=zyxwvutsrqponmlkjihgfedcba654321
      - NODE_OPTIONS=--no-experimental-fetch
    ports:
      - "5601:5601"
    networks:
      - umitcoban

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    volumes:
      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - umitcoban

  grafana:
    container_name: grafana
    image: grafana/grafana
    ports:
      - "3000:3000"
    networks:
      - umitcoban


volumes:
  esdata1:
    driver: local
  document_mongo_db_data:
    driver: local

networks:
  umitcoban:
    driver: bridge
