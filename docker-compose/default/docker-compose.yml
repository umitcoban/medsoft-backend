version: "3.8"
services:

  config-server:
    container_name: config-server
    image: umitcoban/config-server:1.0.0
    healthcheck:
      test: "curl --fail --silent localhost:8763/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 40s
    ports:
      - "8763:8763"
    networks:
      - umitcoban

  eureka-server:
    container_name: eureka-server
    image: umitcoban/eureka-server:1.0.0
    healthcheck:
      test: "curl --fail --silent localhost:8761/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 40s
    environment:
      SPRING_CONFIG_IMPORT: "configserver:http://config-server:8763"
    ports:
      - "8761:8761"
    depends_on:
      config-server:
        condition: service_healthy
    networks:
      - umitcoban

  gateway-server:
    container_name: gateway-server
    image: umitcoban/gateway-server:1.0.0
    environment:
      SPRING_CONFIG_IMPORT: "configserver:http://config-server:8763"
    ports:
      - "8765:8765"
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    networks:
      - umitcoban

  account-db:
    container_name: account-db
    image: postgres:16.0
    restart: unless-stopped
    ports:
      - "5445:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "account_db" ]
    environment:
      POSTGRES_DB: "account_db"
      POSTGRES_USER: "account"
      POSTGRES_PASSWORD: "account"
      POSTGRES_ROOT_PASSWORD: "account"
    volumes:
      - ./account_db/data:/var/lib/postgresql/data
    networks:
      - umitcoban

  account-server:
    container_name: account-server
    image: umitcoban/account-server:1.0.0
    environment:
      SPRING_CONFIG_IMPORT: "configserver:http://config-server:8763"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://account-db:5432/account_db"
      SPRING_DATASOURCE_USERNAME: "account"
      SPRING_DATASOURCE_PASSWORD: "account"
      SPRING_RABBITMQ_HOST: "rabbit"
    ports:
      - "8440:8440"
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      account-db:
        condition: service_healthy
    networks:
      - umitcoban

  key-cloak-db:
    container_name: key-cloak-db
    image: postgres:16.0
    restart: unless-stopped
    ports:
      - "5435:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "keycloak" ]
    environment:
      POSTGRES_DB: "keycloak"
      POSTGRES_USER: "keycloak"
      POSTGRES_PASSWORD: "keycloak"
      POSTGRES_ROOT_PASSWORD: "keycloak"
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
    networks:
      - umitcoban

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:24.0.0
    command: [ "start-dev" ]
    restart: unless-stopped
    depends_on:
      key-cloak-db:
        condition: service_healthy
    environment:
      KC_DB: "postgres"
      KC_DB_USERNAME: "keycloak"
      KC_DB_PASSWORD: "keycloak"
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
      KC_DB_URL: "jdbc:postgresql://key-cloak-db:5432/keycloak"
      KC_METRICS_ENABLED: true
      KC_LOG_LEVEL: INFO
    ports:
      - "7080:8080"
    networks:
      - umitcoban

  rabbitmq:
    image: rabbitmq:latest
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 5s
    networks:
      - umitcoban

networks:
  umitcoban:
    driver: bridge
